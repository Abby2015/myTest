<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		">

	<description>Common Configurations for Spring</description>
	
<!-- 	<context:component-scan base-package="com.yum.kfc.brand"/>-->
<!-- 	<context:component-scan base-package="com.yum.kfc.brand.wxdgb1508"/> -->
<!--	<context:component-scan base-package="com.yum.kfc.brand.wowhy1705"/>-->
	<context:component-scan base-package="com.yum.kfc.brand.common.utils.cache,
										  com.yum.kfc.brand.user.service, com.yum.kfc.brand.store.service, com.yum.kfc.brand.ai.service, com.yum.kfc.brand.settings.service,
										  com.yum.kfc.brand.link.service, com.yum.kfc.brand.book1712, com.yum.kfc.brand.bigcake1806, com.yum.kfc.brand.dzp1807">
		<!-- to include LogServiceImpl only in package com.yum.kfc.brand.user.service.impl -->
		<context:exclude-filter type="regex" expression="^com\.yum\.kfc\.brand\.user\.service\.impl\.((?!LogServiceImpl).)*$"/>
		<context:exclude-filter type="regex" expression="^com\.yum\.kfc\.brand\.store\.service\.impl\.((?!StoreServiceImpl|CityServiceImpl).)*$"/>
	</context:component-scan>
	
	<context:annotation-config />
	
	<!--bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"-->
	<bean class="com.yum.kfc.brand.common.utils.spring.CryptPropertySourcesPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="true"></property>
		<property name="locations">
			<list><!-- use property found in LAST found file, none exist file will be ignored -->
<!-- 				<value>classpath:/app.properties</value> -->
				<value>classpath:/basic.properties</value>
				<value>file:///opt/brandconfig/campaign/superapp.config</value>
				<value>file:///opt/brandconfig/campaign/camp.config</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driver}" />
		<property name="driverUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="houseKeepingTestSql" value="select current_timestamp" />
		<property name="alias" value="KFC-BRAND-JDBC-POOL-PROXOOL-${db.name.kfc.brand}" />
		<property name="prototypeCount" value="100" />
		<property name="maximumConnectionCount" value="300" />
		<property name="minimumConnectionCount" value="100" />
		<property name="simultaneousBuildThrottle" value="100" />
		<property name="maximumActiveTime" value="900000" />
		<property name="testBeforeUse" value="true" />
		<property name="testAfterUse" value="true" />
		<property name="trace" value="false" />
		<property name="verbose" value="false" />
		<property name="delegateProperties" value="autoCommit=true,user=${jdbc.username},password=${jdbc.password}" />
	</bean>
	<bean class="org.logicalcobwebs.proxool.ProxoolFacade" destroy-method="shutdown"/>
	
	<bean id="dataSource_slave" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driver}" />
		<property name="driverUrl" value="${jdbc.url.slave}" />
		<property name="user" value="${jdbc.username.slave}" />
		<property name="password" value="${jdbc.password.slave}" />
		<property name="houseKeepingTestSql" value="select current_timestamp" />
		<property name="alias" value="KFC-BRAND-JDBC-POOL-PROXOOL-${db.name.kfc.brand}-slave" />
		<property name="prototypeCount" value="${jdbc.conns.minIdle.slave}" />
		<property name="maximumConnectionCount" value="${jdbc.conns.max.slave}" />
		<property name="minimumConnectionCount" value="${jdbc.conns.min.slave}" />
		<property name="simultaneousBuildThrottle" value="${jdbc.conns.buildThrottle.slave}" />
		<property name="maximumActiveTime" value="${jdbc.conns.maxActiveTime.slave}" />
		<property name="testBeforeUse" value="true" />
		<property name="testAfterUse" value="true" />
		<property name="trace" value="false" />
		<property name="verbose" value="false" />
		<property name="delegateProperties" value="autoCommit=true,user=${jdbc.username.slave},password=${jdbc.password.slave}" />
	</bean>
	
	<bean id="dataSource_socialMaster" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driver}" />
		<property name="driverUrl" value="${jdbc.url.social}" />
		<property name="user" value="${jdbc.username.social}" />
		<property name="password" value="${jdbc.password.social}" />
		<property name="houseKeepingTestSql" value="select current_timestamp" />
		<property name="alias" value="KFC-BRAND-JDBC-POOL-PROXOOL-${db.name.kfc.social}-social" />
		<property name="prototypeCount" value="${jdbc.conns.minIdle.social}" />
		<property name="maximumConnectionCount" value="${jdbc.conns.max.social}" />
		<property name="minimumConnectionCount" value="${jdbc.conns.min.social}" />
		<property name="simultaneousBuildThrottle" value="${jdbc.conns.buildThrottle.social}" />
		<property name="maximumActiveTime" value="${jdbc.conns.maxActiveTime.social}" />
		<property name="testBeforeUse" value="true" />
		<property name="testAfterUse" value="true" />
		<property name="trace" value="false" />
		<property name="verbose" value="false" />
		<property name="delegateProperties" value="autoCommit=true,user=${jdbc.username.social},password=${jdbc.password.social}" />
	</bean>
	
	<bean id="dataSource_socialSlave" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driver}" />
		<property name="driverUrl" value="${jdbc.url.slave.social}" />
		<property name="user" value="${jdbc.username.slave.social}" />
		<property name="password" value="${jdbc.password.slave.social}" />
		<property name="houseKeepingTestSql" value="select current_timestamp" />
		<property name="alias" value="KFC-BRAND-JDBC-POOL-PROXOOL-${db.name.kfc.social}-social-slave" />
		<property name="prototypeCount" value="${jdbc.conns.minIdle.slave.social}" />
		<property name="maximumConnectionCount" value="${jdbc.conns.max.slave.social}" />
		<property name="minimumConnectionCount" value="${jdbc.conns.min.slave.social}" />
		<property name="simultaneousBuildThrottle" value="${jdbc.conns.buildThrottle.slave.social}" />
		<property name="maximumActiveTime" value="${jdbc.conns.maxActiveTime.slave.social}" />
		<property name="testBeforeUse" value="true" />
		<property name="testAfterUse" value="true" />
		<property name="trace" value="false" />
		<property name="verbose" value="false" />
		<property name="delegateProperties" value="autoCommit=true,user=${jdbc.username.slave.social},password=${jdbc.password.slave.social}" />
	</bean>
	
	<bean id="dataSource_campMaster" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driver}" />
		<property name="driverUrl" value="${jdbc.url.camp}" />
		<property name="user" value="${jdbc.username.camp}" />
		<property name="password" value="${jdbc.password.camp}" />
		<property name="houseKeepingTestSql" value="select current_timestamp" />
		<property name="alias" value="KFC-BRAND-JDBC-POOL-PROXOOL-${db.name.kfc.camp}-camp" />
		<property name="prototypeCount" value="${jdbc.conns.minIdle.camp}" />
		<property name="maximumConnectionCount" value="${jdbc.conns.max.camp}" />
		<property name="minimumConnectionCount" value="${jdbc.conns.min.camp}" />
		<property name="simultaneousBuildThrottle" value="${jdbc.conns.buildThrottle.camp}" />
		<property name="maximumActiveTime" value="${jdbc.conns.maxActiveTime.camp}" />
		<property name="testBeforeUse" value="true" />
		<property name="testAfterUse" value="true" />
		<property name="trace" value="false" />
		<property name="verbose" value="false" />
		<property name="delegateProperties" value="autoCommit=true,user=${jdbc.username.camp},password=${jdbc.password.camp}" />
	</bean>
	
	<bean id="dataSource_campSlave" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driver}" />
		<property name="driverUrl" value="${jdbc.url.slave.camp}" />
		<property name="user" value="${jdbc.username.slave.camp}" />
		<property name="password" value="${jdbc.password.slave.camp}" />
		<property name="houseKeepingTestSql" value="select current_timestamp" />
		<property name="alias" value="KFC-BRAND-JDBC-POOL-PROXOOL-${db.name.kfc.camp}-camp-slave" />
		<property name="prototypeCount" value="${jdbc.conns.minIdle.slave.camp}" />
		<property name="maximumConnectionCount" value="${jdbc.conns.max.slave.camp}" />
		<property name="minimumConnectionCount" value="${jdbc.conns.min.slave.camp}" />
		<property name="simultaneousBuildThrottle" value="${jdbc.conns.buildThrottle.slave.camp}" />
		<property name="maximumActiveTime" value="${jdbc.conns.maxActiveTime.slave.camp}" />
		<property name="testBeforeUse" value="true" />
		<property name="testAfterUse" value="true" />
		<property name="trace" value="false" />
		<property name="verbose" value="false" />
		<property name="delegateProperties" value="autoCommit=true,user=${jdbc.username.slave.camp},password=${jdbc.password.slave.camp}" />
	</bean>
	
	
	<bean id="dataSourceMasterSlave" class="com.hp.jdf.ssm.dbs.ms.MasterSlaveRoutingDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="MASTER" value-ref="dataSource"/>
                <entry key="SLAVE" value-ref="dataSource_slave"/>
                <entry key="SOCIAL_MASTER" value-ref="dataSource_socialMaster"/>
                <entry key="SOCIAL_SLAVE" value-ref="dataSource_socialSlave"/>
                <entry key="CAMP_MASTER" value-ref="dataSource_campMaster"/>
                <entry key="CAMP_SLAVE" value-ref="dataSource_campSlave"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="${jdbc.datasource.target.default}"/>
    </bean>
	
	<!--bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"-->
	<bean id="sqlSessionFactory" class="com.yum.kfc.brand.common.utils.mybatis.MultipleConfLocSqlSessionFactoryBean">
		<property name="dataSource" ref="${jdbc.datasource}" />
		<!--property name="configLocation" value="classpath:mybatisConfig/mybatis-config.xml" /-->
		<property name="configLocations">
			<array>
				<value>classpath:mybatisConfig/mybatis-config.xml</value>
				<value>classpath:mybatisConfig/mybatis-config-kbs.xml</value>
			</array>
		</property>
		<!-- property name="mapperLocations" value="classpath:com/yum/kfc/brand/dao/**/*Mapper.xml" /-->
		<property name="configurationProperties">
			<props>
				<prop key="db.name.kfc.brand">${db.name.kfc.brand}</prop>
				<prop key="db.name.kfc.social">${db.name.kfc.social}</prop>
				<prop key="db.name.kfc.camp">${db.name.kfc.camp}</prop>
				<!--prop key="cache.timeout.ms">#{ new Long(${cache.timeout}  * 60 * 1000).toString() }</prop-->
			</props>
		</property>
	</bean>

	<!-- https://code.google.com/p/mybatis/issues/detail?id=544 -->
	<!-- org.mybatis.spring.mapper.MapperScannerConfigurer:
		Passing in an actual object which may require placeholders (i.e. DB user password) will fail.
		 Using bean names defers actual object creation until later in the startup process,
		  after all placeholder substituation is completed. 
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" depends-on="springUtil">
		<!-- optional unless there are multiple session factories defined -->
		<!-- property name="sqlSessionFactory" ref="sqlSessionFactory"/-->
		<!-- <property name="basePackage" value="com.yum.kfc.brand.*.dao"></property> -->
		<!-- <property name="basePackage" value="com.yum.kfc.brand.wxdgb1508.dao"></property> -->
<!--		<property name="basePackage" value="com.yum.kfc.brand.wowhy1705.dao"></property>-->
		<property name="basePackage" value="com.yum.kfc.brand.user.dao, com.yum.kfc.brand.user.api.dao,
											com.yum.kfc.brand.store.dao, com.yum.kfc.brand.act.dao, com.yum.kfc.brand.areaAddr.dao, com.yum.kfc.brand.area.dao, com.yum.kfc.brand.auth.dao, com.yum.kfc.brand.coupon.dao, com.yum.kfc.brand.discovery.dao, com.yum.kfc.brand.link.dao, com.yum.kfc.brand.settings.dao,
											com.yum.kfc.brand.book1712.dao, com.yum.kfc.brand.ai.dao, com.yum.kfc.brand.bigcake1806.dao, com.yum.kfc.brand.dzp1807.dao"></property>
	</bean>

	<!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
	<bean id="transactionManager" class="com.hp.jdf.ssm.dbs.ms.MasterSlaveDataSourceTxMgr">
		<property name="dataSource" ref="${jdbc.datasource}" />
	</bean>
	
	<bean id="dbrmsAspect" class="com.hp.jdf.ssm.dbs.ms.DbRouteMSAspect" />
	
	<aop:config>
	    <aop:aspect ref="dbrmsAspect">
	    	<aop:before method="setDbRouteKey" pointcut="execution(* com.kfcmos.svr.svc.mos.*.*(..))" />
	    	<aop:before method="setDbRouteKey" pointcut="execution(* com.yum.kfc.mos2.service.*.*(..))" />
	    	<aop:before method="setDbRouteKey" pointcut="execution(* com.yum.kfc.mos2.dao.BaseDaoImpl.*(..))" />
	    	<aop:before method="setDbRouteKey" pointcut="execution(* com.yum.kfc.brand.*.service.impl.*.*(..))" />
	    	<aop:before method="setDbRouteKey" pointcut="execution(* com.yum.kfc.brand.*.api.service.impl.*.*(..))" />
	    </aop:aspect>
	</aop:config>
	
	<!-- 
  		 The default <tx:advice/> settings are:
		    * The propagation setting is REQUIRED
		    * The isolation level is DEFAULT
		    * The transaction is read/write
		    * The transaction timeout defaults to the default timeout of the underlying transaction system, or or none if timeouts are not supported
		    * Any RuntimeException will trigger rollback, and any checked Exception will NOT
		<tx:method/> settings
		    * propagation: The transaction propagation behavior
		    * isolation:DEFAULT	The transaction isolation level
		    * timeout: The transaction timeout value (in seconds), default to  -1
		    * read-only: Is this transaction read-only? default to false
		    * rollback-for: The Exception(s) that will trigger rollback; comma-delimited. For example, 'com.foo.MyBusinessException,ServletException'
		    * no-rollback-for: The Exception(s) that will NOT trigger rollback; comma-delimited. For example, 'com.foo.MyBusinessException,ServletException'
		to programmatically control the rollback action, coding like below
			try{}catch (SomeException ex) {
    			// trigger rollback programmatically
    			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
  			}
	-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" rollback-for="java.lang.Throwable" />
			<tx:method name="alter*" rollback-for="java.lang.Throwable" />
			<tx:method name="approve*" rollback-for="java.lang.Throwable" />
			<tx:method name="assign*" rollback-for="java.lang.Throwable" />
			<tx:method name="audit*" rollback-for="java.lang.Throwable" />
			<tx:method name="batch*" rollback-for="java.lang.Throwable" />
			<tx:method name="build*" rollback-for="java.lang.Throwable" />
			<tx:method name="change*" rollback-for="java.lang.Throwable" />
			<tx:method name="chg*" rollback-for="java.lang.Throwable" />
			<tx:method name="clear*" rollback-for="java.lang.Throwable" />
			<tx:method name="create*" rollback-for="java.lang.Throwable" />
			<tx:method name="dec*" rollback-for="java.lang.Throwable" />
			<tx:method name="del*" rollback-for="java.lang.Throwable" />
			<tx:method name="exec*" rollback-for="java.lang.Throwable" />
			<tx:method name="extend*" rollback-for="java.lang.Throwable" />
			<tx:method name="grant*" rollback-for="java.lang.Throwable" />
			<tx:method name="inc*" rollback-for="java.lang.Throwable" />
			<tx:method name="insert*" rollback-for="java.lang.Throwable" />
			<tx:method name="lock*" rollback-for="java.lang.Throwable" />
			<tx:method name="log*" rollback-for="java.lang.Throwable" />
			<tx:method name="make*" rollback-for="java.lang.Throwable" />
			<tx:method name="merge*" rollback-for="java.lang.Throwable" />
			<tx:method name="modify*" rollback-for="java.lang.Throwable" />
			<tx:method name="new*" rollback-for="java.lang.Throwable" />
			<tx:method name="patch*" rollback-for="java.lang.Throwable" />
			<tx:method name="post*" rollback-for="java.lang.Throwable" />
			<tx:method name="put*" rollback-for="java.lang.Throwable" />
			<tx:method name="reject*" rollback-for="java.lang.Throwable" />
			<tx:method name="remove*" rollback-for="java.lang.Throwable" />
			<tx:method name="revoke*" rollback-for="java.lang.Throwable" />
			<tx:method name="run*" rollback-for="java.lang.Throwable" />
			<tx:method name="save*" rollback-for="java.lang.Throwable" />
			<tx:method name="send*" rollback-for="java.lang.Throwable" />
			<tx:method name="set*" rollback-for="java.lang.Throwable" />
			<tx:method name="shield*" rollback-for="java.lang.Throwable" />
			<tx:method name="split*" rollback-for="java.lang.Throwable" />
			<tx:method name="sync*" rollback-for="java.lang.Throwable" />
			<tx:method name="update*" rollback-for="java.lang.Throwable" />
			<tx:method name="undo*" rollback-for="java.lang.Throwable" />
			<tx:method name="unlock*" rollback-for="java.lang.Throwable" />
			<tx:method name="write*" rollback-for="java.lang.Throwable" />
			
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- uses JDK's dynamic proxies by default
		 to use CGLIB, set proxy-target-class="true"
		 to use AspectJ, use <aop:aspectj-autoproxy -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="services00" expression="execution(* com.yum.kfc.brand.user.service.impl.LogServiceImpl.*(..))"/>
		<aop:pointcut id="services01" expression="execution(* com.yum.kfc.brand.store.service.impl.StoreServiceImpl.*(..))"/>
		<aop:pointcut id="services02" expression="execution(* com.yum.kfc.brand.store.service.impl.CityServiceImpl.*(..))"/>
		<aop:pointcut id="services03" expression="execution(* com.yum.kfc.brand.ai.service.impl.AiServiceImpl.*(..))"/>
		<aop:pointcut id="services1" expression="execution(* com.kfcmos.svr.svc.mos.*.*(..))"/>
		<aop:pointcut id="services2" expression="execution(* com.yum.kfc.mos2.service.*.*(..))"/>
	    <aop:pointcut id="services3" expression="execution(* com.yum.kfc.mos2.dao.BaseDaoImpl.*(..))" />
		<!--  <aop:pointcut id="services4" expression="execution(* com.yum.kfc.brand.*.service.impl.*.*(..))"/> -->
		<!-- <aop:pointcut id="services4" expression="execution(* com.yum.kfc.brand.wxdgb1508.service.impl.*.*(..))"/> -->
<!-- 		<aop:pointcut id="services4" expression="execution(* com.yum.kfc.brand.dzp1711.service.impl.*.*(..))"/> -->
<!--		<aop:pointcut id="services4" expression="execution(* com.yum.kfc.brand.wowhy1705.service.impl.*.*(..))"/>-->
		<aop:pointcut id="services4" expression="execution(* com.yum.kfc.brand.book1712.service.impl.*.*(..))"/>
		<aop:pointcut id="services5" expression="execution(* com.yum.kfc.brand.bigcake1806.service.impl.*.*(..))"/>
		<aop:pointcut id="services6" expression="execution(* com.yum.kfc.brand.dzp1807.service.impl.*.*(..))"/>

		<aop:advisor pointcut-ref="services00" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="services01" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="services02" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="services03" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="services1" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="services2" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="services3" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="services4" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="services5" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="services6" advice-ref="txAdvice" />
	</aop:config>

	<!-- ===================== SpringUtils ================================= -->
	<!-- a help bean which will receive application context and event -->
	<bean id="springUtil" class="com.hp.jdf.ssm.util.SpringUtil" depends-on="messageSource"/>

	<!-- ===================== resource bundle ============================= -->
	<!-- this bean defines the resouces which can be accessed
		 via ApplcaitonContext.getMessage() or SpringUtils.getResource()
		 
		 support I18N, for example r.properties and r_zh_CN.properties
		
		set application.properties as resource by default -->
	<!-- <bean class="org.springframework.context.support.ResourceBundleMessageSource"> -->
	<!--bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"-->
	<bean id="messageSource" class="com.yum.kfc.brand.common.utils.spring.SuperAppReloadableResourceBundleMessageSource">
		<property name="useCodeAsDefaultMessage" value="false" />
		<property name="cacheSeconds" value="-1" />
		<property name="basenames">
			<list><!-- use property in FIRST found file, none exist file will be ignored -->
				<value>file:///opt/brandconfig/campaign/camp.config</value>
				<value>file:///opt/brandconfig/campaign/superapp.config</value>
				<value>classpath:/basic</value>
<!-- 				<value>classpath:/app</value> -->
				<value>classpath:web/application-resource</value>
			</list>
		</property>
	</bean>
	
	<bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"
		factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
		<constructor-arg>
			<value>neeaMemcachedPool</value>
		</constructor-arg>
		<property name="servers">
			<list>
				<value>${memcache.server1}</value>
				<value>${memcache.server2}</value>
			</list>
		</property>
		<property name="initConn">
			<value>${memcache.initConn}</value>
		</property>
		<property name="minConn">
			<value>${memcache.minConn}</value>
		</property>
		<property name="maxConn">
			<value>${memcache.maxConn}</value>
		</property>
		<property name="maintSleep">
			<value>${memcache.maintSleep}</value>
		</property>
		<property name="nagle">
			<value>${memcache.nagle}</value>
		</property>
		<property name="socketTO">
			<value>${memcache.socketTO}</value>
		</property>
	</bean>
	

	<bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient">
		<constructor-arg><value>neeaMemcachedPool</value></constructor-arg>
		<constructor-arg><value>true</value></constructor-arg>
		<constructor-arg><value>false</value></constructor-arg>
		<constructor-arg><null/></constructor-arg>
		<constructor-arg><bean class="com.yum.kfc.brand.common.utils.MemcacheClientErrorHandler" /></constructor-arg>
	</bean>
	
	<bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="${taskExecutor.corePoolSize}" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="${taskExecutor.maxPoolSize}" />
		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->
		<property name="queueCapacity" value="${taskExecutor.queueCapacity}" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="${taskExecutor.keepAliveSeconds}" />
		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
		
	<!--bean id="cache" class="com.hp.dwm.jdf.cache.impl.EhcacheCacheImpl" destroy-method="destroy">
		<constructor-arg index="0" value="/ehcacheConfig/ehcache.xml" />
	</bean-->
	
	<import resource="classpath:springConfig/appCtx-monitoring.xml" />
	
</beans>
